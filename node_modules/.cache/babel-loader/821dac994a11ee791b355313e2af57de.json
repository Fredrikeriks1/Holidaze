{"ast":null,"code":"var _jsxFileName = \"/Users/fredrikeriksen/Documents/FEU/PE2/my-project/src/components/contact/ContactForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { BASE_URL, headers } from \"../../constants/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  name: yup.string().min(2, \"Name is required\").matches(/[a-zA-z-\\s]/g, \"Only characters A-Z are valid\").required(),\n  email: yup.string().email(\"E-mail is not valid\", {\n    regex: /^[\\d-_.a-zA-z]+@[\\d-_.a-zA-z]+\\.[a-zA-z]+$/g\n  }).required(\"E-mail is required\"),\n  message: yup.string().min(10, \"Message is required\").required()\n});\n\nfunction Contact() {\n  _s();\n\n  var _errors$name, _errors$email, _errors$message;\n\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n\n  async function onSubmit(data) {\n    console.log(\"data\", data);\n    const url = BASE_URL + \"contacts\";\n    const options = {\n      headers,\n      method: \"POST\",\n      body: JSON.stringify(data)\n    };\n    await fetch(url, options);\n    var con = window.confirm(\"Said everything you needed to say? \\nClick cancel to keep filling out the form or click OK to send it in\");\n\n    if (con === true) {\n      localStorage.setItem(\"enquiry\", JSON.stringify(data));\n    }\n\n    if (con === false) {\n      localStorage.setItem(\"cancel\", \"message was canceled\");\n    } //window.localStorage.clear();\n\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"contact-form\",\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contact Us\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"name\",\n      children: \"Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      title: \"Name\",\n      type: \"name\",\n      name: \"name\",\n      ref: register\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"E-mail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      title: \"E-mail\",\n      type: \"email\",\n      name: \"email\",\n      ref: register\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"message\",\n      children: \"Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      type: \"text\",\n      name: \"message\",\n      ref: register\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: (_errors$message = errors.message) === null || _errors$message === void 0 ? void 0 : _errors$message.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      title: \"Send message\",\n      className: \"btn-blue\",\n      type: \"submit\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Contact, \"iyH731LTjAbxnbpM16EGorBPneQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/Users/fredrikeriksen/Documents/FEU/PE2/my-project/src/components/contact/ContactForm.js"],"names":["React","useForm","yupResolver","yup","BASE_URL","headers","schema","object","shape","name","string","min","matches","required","email","regex","message","Contact","register","handleSubmit","errors","resolver","onSubmit","data","console","log","url","options","method","body","JSON","stringify","fetch","con","window","confirm","localStorage","setItem"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { BASE_URL, headers } from \"../../constants/api\";\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, \"Name is required\")\n    .matches(/[a-zA-z-\\s]/g, \"Only characters A-Z are valid\")\n    .required(),\n  email: yup\n    .string()\n    .email(\"E-mail is not valid\", {\n      regex: /^[\\d-_.a-zA-z]+@[\\d-_.a-zA-z]+\\.[a-zA-z]+$/g,\n    })\n    .required(\"E-mail is required\"),\n  message: yup.string().min(10, \"Message is required\").required(),\n});\n\nfunction Contact() {\n  const { register, handleSubmit, errors } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  async function onSubmit(data) {\n    console.log(\"data\", data);\n    const url = BASE_URL + \"contacts\";\n    const options = { headers, method: \"POST\", body: JSON.stringify(data) };\n    await fetch(url, options);\n    var con = window.confirm(\n      \"Said everything you needed to say? \\nClick cancel to keep filling out the form or click OK to send it in\"\n    );\n\n    if (con === true) {\n      localStorage.setItem(\"enquiry\", JSON.stringify(data));\n    }\n    if (con === false) {\n      localStorage.setItem(\"cancel\", \"message was canceled\");\n    }\n    //window.localStorage.clear();\n  }\n\n  return (\n    <form className=\"contact-form\" onSubmit={handleSubmit(onSubmit)}>\n      <h2>Contact Us</h2>\n      <label htmlFor=\"name\">Name</label>\n      <input title=\"Name\" type=\"name\" name=\"name\" ref={register} />\n      <p className=\"error\">{errors.name?.message}</p>\n      <label htmlFor=\"email\">E-mail</label>\n      <input title=\"E-mail\" type=\"email\" name=\"email\" ref={register} />\n      <p className=\"error\">{errors.email?.message}</p>\n      <label htmlFor=\"message\">Message</label>\n      <textarea type=\"text\" name=\"message\" ref={register}></textarea>\n      <p className=\"error\">{errors.message?.message}</p>\n      <button title=\"Send message\" className=\"btn-blue\" type=\"submit\">\n        Send\n      </button>\n    </form>\n  );\n}\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}